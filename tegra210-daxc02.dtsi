/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

#define DAXC02_RST_A  TEGRA_GPIO(S, 4)
#define DAXC02_RST_C  TEGRA_GPIO(S, 5)

/*
I2C Busses:

i2c0 = "/i2c@7000c000";
i2c1 = "/i2c@7000c400";
i2c2 = "/i2c@7000c500";
i2c3 = "/i2c@7000c700";
i2c4 = "/i2c@7000d000";
i2c5 = "/i2c@7000d100";
i2c6 = "/host1x/i2c@546c0000";
*/

/ {
    /* set camera gpio direction to output */
    gpio: gpio@6000d000 {
        daxc02_reset {
            gpio-hog;
            output-low;
            gpios = <DAXC02_RST_A 0 DAXC02_RST_C 0>;
            label = "daxc02_rst_a", "daxc02_rst_c";
        };
    };

    regulators {
        /* Required for Jetpack 3.1/3.2:
         * Clear CAM1_RST_L as the regulator@210 gpio.
         */
        en_vdd_vcm_2v8: regulator@210 {
            gpio = <>;
        };
        /* Required for Jetpack 3.1:
         * Add the deleted regulator@211. This is re-added in 3.2.
         */
        en_vdd_cam_1v2_alt: regulator@211 {
            compatible = "regulator-fixed-sync";
            reg = <211>;
            regulator-name = "en-vdd-cam-1v2-alt";
            regulator-min-microvol = <1200000>;
            regulator-max-microvol = <1200000>;
            gpio = <&tca9539_77 10 1>;
            enable-active-high;
        };
    };

    host1x {
        vi_base: vi {
            num-channels = <0x2>;
            ports {
                #address-cells = <0x1>;
                #size-cells = <0x0>;

                vi_port0: port@0 {
                    reg = <0x0>;
                    status = "okay";
                    daxc02_vi_in0: endpoint {
                        status = "okay";
                        csi-port = <0x0>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_csi_out0>;
                    };
                };
                vi_port1: port@1 {
                    reg = <0x1>;
                    status = "okay";
                    daxc02_vi_in1: endpoint {
                        status = "okay";
                        csi-port = <0x2>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_csi_out1>;
                    };
                };
            };
        };

        csi_base: nvcsi {
            num-channels = <2>;
            #address-cells = <1>;
            #size-cells = <0>;

            csi_chan0: channel@0 {
                reg = <0>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        daxc02_csi_in0: endpoint@0 {
                            csi-port = <0>;
                            bus-width = <1>;
                            remote-endpoint = <&daxc02_out0>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        daxc02_csi_out0: endpoint@1 {
                            remote-endpoint = <&daxc02_vi_in0>;
                        };
                    };
                };
            };
            csi_chan1: channel@1 {
                reg = <1>;
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    port@0 {
                        reg = <0>;
                        daxc02_csi_in1: endpoint@2 {
                            csi-port = <2>;
                            bus-width = <1>;
                            remote-endpoint = <&daxc02_out1>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        daxc02_csi_out1: endpoint@3 {
                            remote-endpoint = <&daxc02_vi_in1>;
                        };
                    };
                };
            };
        };

        i2c@546c0000 {
            status = "okay";
            #address-cells = <1>;
            #size-cells = <0>;

            daxc02_a@10 {
                compatible = "novadynamics,daxc02";

                /* I2C device address */
                reg = <0x10>;

                /* Device */
                devnode = "video0";

                /* Physical dimensions of sensor */
                physical_w = "4.8";
                physical_h = "3.6";

                /* Sensor Model */
                sensor_model ="mt9m021";

                /* input clock for the device */
                clocks = <&tegra_car TEGRA210_CLK_CLK_OUT_1>;
                clock-names = "cam_mclk1";
                clock-frequency = <24000000>;
                mclk = "cam_mclk1";

                /* Define any required hw resources needed by driver */
                /* ie. clocks, io pins, power sources */
                vana-supply = <&en_vdd_cam_hv_2v8>;     // analog 2.8v
                vif-supply = <&en_vdd_cam>;             // interface 1.8v
                vdig-supply = <&en_vdd_cam_1v2>;        // digital 1.2v
                reset-gpios = <&gpio DAXC02_RST_A GPIO_ACTIVE_LOW>;

                avdd-reg = "vana";
                iovdd-reg = "vif";
                dvdd-reg = "vdig";

                mode0 {
                    /* 1280x720 (720p) */
                    mclk_khz = "24000";
                    num_lanes = "1";
                    tegra_sinterface = "serial_a";
                    discontinuous_clk = "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    dynamic_pixel_bit_depth = "12";
                    csi_pixel_bit_depth = "12";
                    mode_type = "bayer";
                    pixel_phase = "rggb";

                    active_w = "1280";
                    active_h = "720";
                    readout_orientation = "0";
                    line_length = "1650";
                    inherent_gain = "1";
                    mclk_multiplier = "3.09375";
                    pix_clk_hz = "74250000";

                    min_gain_val = "1";
                    max_gain_val = "224";
                    min_hdr_ratio = "";
                    max_hdr_ratio = "";
                    min_framerate = "1";
                    max_framerate = "49";
                    min_exp_time = "22";
                    max_exp_time = "14934";
                    embedded_metadata_height = "0";
                };
                ports {
                    #address-cells = <0x1>;
                    #size-cells = <0x0>;

                    port@0 {
                        reg = <0x0>;
                        daxc02_out0: endpoint {
                            csi-port = <0x0>;
                            bus-width = <0x1>;
                            remote-endpoint = <&daxc02_csi_in0>;
                        };
                    };
                };
            };
        };
    };

    i2c@7000c000 {
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;

        daxc02_c@10 {
            compatible = "novadynamics,daxc02";

            /* I2C device address */
            reg = <0x10>;

            /* Device */
            devnode = "video1";

            /* Physical dimensions of sensor */
            physical_w = "4.8";
            physical_h = "3.6";

            /* Sensor Model */
            sensor_model ="mt9m021";

            /* input clock for the device*/
            clocks = <&tegra_car TEGRA210_CLK_CLK_OUT_3>;
            clock-names = "cam_mclk1";
            clock-frequency = <24000000>;
            mclk = "cam_mclk1";

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            vana-supply = <&en_vdd_cam_hv_2v8>;     // analog 2.8v
            vif-supply = <&en_vdd_cam>;             // interface 1.8v
            vdig-supply = <&en_vdd_cam_1v2_alt>;    // digital 1.2v
            reset-gpios = <&gpio DAXC02_RST_C GPIO_ACTIVE_LOW>;

            avdd-reg = "vana";
            iovdd-reg = "vif";
            dvdd-reg = "vdig";

            mode0 {
                /* 1280x720 (720p) */
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                discontinuous_clk = "yes";
                dpcm_enable = "false";
                cil_settletime = "0";

                dynamic_pixel_bit_depth = "12";
                csi_pixel_bit_depth = "12";
                mode_type = "bayer";
                pixel_phase = "rggb";

                active_w = "1280";
                active_h = "720";
                readout_orientation = "0";
                line_length = "1650";
                inherent_gain = "1";
                mclk_multiplier = "3.09375";
                pix_clk_hz = "74250000";

                min_gain_val = "1";
                max_gain_val = "224";
                min_hdr_ratio = "";
                max_hdr_ratio = "";
                min_framerate = "1";
                max_framerate = "49";
                min_exp_time = "22";
                max_exp_time = "14934";
                embedded_metadata_height = "0";
            };
            ports {
                #address-cells = <0x1>;
                #size-cells = <0x0>;

                port@0 {
                    reg = <0x0>;
                    daxc02_out1: endpoint {
                        csi-port = <0x2>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_csi_in1>;
                    };
                };
            };
        };
    };

    tcp: tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";

        /**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <2>;
        max_lane_speed = <1500000>;
		min_bits_per_pixel = <12>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;

		max_pixel_rate = <408000>;
		isp_peak_byte_per_pixel = <2>;
		isp_bw_margin_pct = <25>;

        modules {
            module0 {
                badge = "daxc02_master_mt9m021";
                position = "front";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "daxc02 6-0010";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/daxc02_a@10";
                    status = "okay";
                };
            };
            module1 {
                badge = "daxc02_slave_mt9m021";
                position = "rear";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "daxc02 0-0010";
                    proc-device-tree = "/proc/device-tree/i2c@7000c000/daxc02_c@10";
                    status = "okay";
                };
            };
        };
    };
};
