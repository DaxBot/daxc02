/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

/*
I2C Busses:

i2c0 = "/i2c@7000c000";
i2c1 = "/i2c@7000c400";
i2c2 = "/i2c@7000c500";
i2c3 = "/i2c@7000c700";
i2c4 = "/i2c@7000d000";
i2c5 = "/i2c@7000d100";
i2c6 = "/host1x/i2c@546c0000";
*/

/ {
    i2c@7000c000 {
        status = "okay";
        #address-cells = <1>;
        #size-cells = <0>;

        daxc02_c@10 {
            compatible = "nova,daxc02";

            /* I2C device address */
            reg = <0x10>;
                
            /* Device */
            devnode = "video1";

            /* Physical dimensions of sensor */
            physical_w = "10";
            physical_h = "10";

            /* Sensor Model */
            sensor_model ="mt9m021";

            /* input clock for the device in MHz*/
            clocks = <&tegra_car TEGRA210_CLK_ID_CLK_OUT_3>;
            clock-names = "mclk";
            clock-frequency = <24000000>;
            mclk = "cam_mclk1";

            /* Define any required hw resources needed by driver */
            /* ie. clocks, io pins, power sources */
            vana-supply = <&en_vdd_cam_hv_2v8>;     // analog 2.8v
            vif-supply = <&en_vdd_cam>;             // interface 1.8v
            vdig-supply = <&en_vdd_cam_1v2_alt>;    // digital 1.2v

            avdd-reg = "vana";
            iovdd-reg = "vif";
            dvdd-reg = "vdig";

            /* Defines number of frames to be dropped by driver internally after applying */
            /* sensor crop settings. Some sensors send corrupt frames after applying */
            /* crop co-ordinates */
            post_crop_frame_drop = "0";

            /* when set true analog gain value expressed in decibels." */
            use_decibel_gain = "false";

            mode0 {
                mclk_khz = "24000";
                num_lanes = "1";
                tegra_sinterface = "serial_c";
                discontinuous_clk = "yes";
                dpcm_enable = "false";
                cil_settletime = "0";

                active_w = "1280";
                active_h = "720";
                pixel_t = "bayer_rggb12";
                readout_orientation = "0";
                line_length = "1280";
                inherent_gain = "1";
                mclk_multiplier = "3.094";
                pix_clk_hz = "74250000";

                min_gain_val = "1";
                max_gain_val = "255";
                min_hdr_ratio = "";
                max_hdr_ratio = "";
                min_framerate = "1";
                max_framerate = "60";
                min_exp_time = "0";
                max_exp_time = "255";
                embedded_metadata_height = "0";
            };
            ports {
                #address-cells = <0x1>;
                #size-cells = <0x0>;

                port@0 {
                    reg = <0x0>;
                    daxc02_out_slave: endpoint {
                        csi-port = <0x2>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_vi_in_slave>;
                    };
                };
            };
        };
    };

    host1x {
        vi {
            num-channels = <0x2>;
            ports {
                #address-cells = <0x1>;
                #size-cells = <0x0>;

                port@0 {
                    reg = <0x0>;
                    status = "okay";
                    daxc02_vi_in_master: endpoint {
                        status = "okay";
                        csi-port = <0x0>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_out_master>;
                    };
                };
                port@1 {
                    reg = <0x1>;
                    status = "okay";
                    daxc02_vi_in_slave: endpoint {
                        status = "okay";
                        csi-port = <0x2>;
                        bus-width = <0x1>;
                        remote-endpoint = <&daxc02_out_slave>;
                    };
                };
            };   
        };

        i2c@546c0000 {
            status = "okay";
            #address-cells = <1>;
            #size-cells = <0>;

            daxc02_a@10 {
                compatible = "nova,daxc02";

                /* I2C device address */
                reg = <0x10>;
                
                /* Device */
                devnode = "video0";

                /* Physical dimensions of sensor */
                physical_w = "10";
                physical_h = "10";

                /* Sensor Model */
                sensor_model ="mt9m021";

                /* input clock for the device in MHz*/
                clocks = <&tegra_car TEGRA210_CLK_ID_CLK_OUT_3>;
				clock-names = "mclk";
				clock-frequency = <24000000>;
                mclk = "cam_mclk1";

                /* Define any required hw resources needed by driver */
                /* ie. clocks, io pins, power sources */
                vana-supply = <&en_vdd_cam_hv_2v8>;     // analog 2.8v
                vif-supply = <&en_vdd_cam>;             // interface 1.8v
                vdig-supply = <&en_vdd_cam_1v2_alt>;    // digital 1.2v

                avdd-reg = "vana";
                iovdd-reg = "vif";
                dvdd-reg = "vdig";

                /* Defines number of frames to be dropped by driver internally after applying */
                /* sensor crop settings. Some sensors send corrupt frames after applying */
                /* crop co-ordinates */
                post_crop_frame_drop = "0";

                /* when set true analog gain value expressed in decibels." */
                use_decibel_gain = "false";

                mode0 {
                    mclk_khz = "24000";
                    num_lanes = "1";
                    tegra_sinterface = "serial_a";
                    discontinuous_clk = "yes";
                    dpcm_enable = "false";
                    cil_settletime = "0";

                    active_w = "1280";
                    active_h = "720";
                    pixel_t = "bayer_rggb12";
                    readout_orientation = "0";
                    line_length = "1280";
                    inherent_gain = "1";
                    mclk_multiplier = "3.094";
                    pix_clk_hz = "74250000";

                    min_gain_val = "1";
                    max_gain_val = "255";
                    min_hdr_ratio = "";
                    max_hdr_ratio = "";
                    min_framerate = "1";
                    max_framerate = "60";
                    min_exp_time = "0";
                    max_exp_time = "255";
                    embedded_metadata_height = "0";
                };
                ports {
                    #address-cells = <0x1>;
                    #size-cells = <0x0>;

                    port@0 {
                        reg = <0x0>;
                        daxc02_out_master: endpoint {
                            csi-port = <0x0>;
                            bus-width = <0x1>;
                            remote-endpoint = <&daxc02_vi_in_master>;
                        };
                    };
                };
            };
        };
    };

    tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";
        modules {
            module0 {
                badge = "daxc02_master_mt9m021";
                position = "front";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "daxc02 6-0010";
                    proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/daxc02_a@10";
                	status = "okay";
                };
            };
            module1 {
                badge = "daxc02_slave_mt9m021";
                position = "rear";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    pcl_id = "v4l2_sensor";
                    devname = "daxc02 0-0010";
                    proc-device-tree = "/proc/device-tree/i2c@7000c000/daxc02_c@10";
                	status = "okay";
                };
            };
        };
    };
};
